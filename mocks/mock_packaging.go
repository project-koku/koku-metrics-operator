// Code generated by MockGen. DO NOT EDIT.
// Source: packaging/packaging.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	packaging "github.com/project-koku/koku-metrics-operator/packaging"
)

// MockFilePackagerInterface is a mock of FilePackagerInterface interface.
type MockFilePackagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFilePackagerInterfaceMockRecorder
}

// MockFilePackagerInterfaceMockRecorder is the mock recorder for MockFilePackagerInterface.
type MockFilePackagerInterfaceMockRecorder struct {
	mock *MockFilePackagerInterface
}

// NewMockFilePackagerInterface creates a new mock instance.
func NewMockFilePackagerInterface(ctrl *gomock.Controller) *MockFilePackagerInterface {
	mock := &MockFilePackagerInterface{ctrl: ctrl}
	mock.recorder = &MockFilePackagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilePackagerInterface) EXPECT() *MockFilePackagerInterfaceMockRecorder {
	return m.recorder
}

// GetFileInfo mocks base method.
func (m *MockFilePackagerInterface) GetFileInfo(file string) (packaging.FileInfoManifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileInfo", file)
	ret0, _ := ret[0].(packaging.FileInfoManifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileInfo indicates an expected call of GetFileInfo.
func (mr *MockFilePackagerInterfaceMockRecorder) GetFileInfo(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfo", reflect.TypeOf((*MockFilePackagerInterface)(nil).GetFileInfo), file)
}

// PackageReports mocks base method.
func (m *MockFilePackagerInterface) PackageReports() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackageReports")
	ret0, _ := ret[0].(error)
	return ret0
}

// PackageReports indicates an expected call of PackageReports.
func (mr *MockFilePackagerInterfaceMockRecorder) PackageReports() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackageReports", reflect.TypeOf((*MockFilePackagerInterface)(nil).PackageReports))
}

// TrimPackages mocks base method.
func (m *MockFilePackagerInterface) TrimPackages() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrimPackages")
	ret0, _ := ret[0].(error)
	return ret0
}

// TrimPackages indicates an expected call of TrimPackages.
func (mr *MockFilePackagerInterfaceMockRecorder) TrimPackages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrimPackages", reflect.TypeOf((*MockFilePackagerInterface)(nil).TrimPackages))
}

// MockManifest is a mock of Manifest interface.
type MockManifest struct {
	ctrl     *gomock.Controller
	recorder *MockManifestMockRecorder
}

// MockManifestMockRecorder is the mock recorder for MockManifest.
type MockManifestMockRecorder struct {
	mock *MockManifest
}

// NewMockManifest creates a new mock instance.
func NewMockManifest(ctrl *gomock.Controller) *MockManifest {
	mock := &MockManifest{ctrl: ctrl}
	mock.recorder = &MockManifestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManifest) EXPECT() *MockManifestMockRecorder {
	return m.recorder
}
